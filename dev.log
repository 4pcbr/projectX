================================================================================

Date: 2015-12-07

Log: Installing the QT on raspberry image
Using this guide: https://wiki.qt.io/RaspberryPi_Beginners_Guide
detected that the links on the original image are still broken
Some fixes proposed:
http://thebugfreeblog.blogspot.it/2012/11/bring-up-qt-50-on-raspberry-pi.html

================================================================================

Date: 2015-12-08

Log: Another attempt to fix the links problem. It seems fixQualifiedLibraryPaths is
not compatible with the recent raspberrian release. Pushed some fixed sed
rewrite rules. make is in progress.

Something uPnP related:
    http://www.zeroconf.org/
    http://www.upnp.org/
    http://stackoverflow.com/questions/2304566/erlang-neighbour-search
    https://code.google.com/p/nodefinder/

qtbase finally built. I also built webkit, but the original folder was empty,
so I simply cloned the repo into qt5 folder:
git clone git://code.qt.io/qt/qtwebkit.git

WebKit requires sqlite so one has to export the lib explicitly:
export SQLITE3SRCDIR=~/opt/qt5/qtbase/src/3rdparty/sqlite

it also needs an explicit rootfolder env:
export PKG_CONFIG_LIBDIR=/mnt/rasp-pi-rootfs/usr/lib/pkgconfig

Some packages were missing:
sudo apt-get install gperf bison flex

then launched the helper script:
./Tools/Scripts/build-webkit --qmake=/usr/local/qt5pi/bin/qmake --qt --release --no-webgl
Node the qmake path -- if it's not provided the script will use the system qmake
instead.
================================================================================

Date: 2015-12-09

Log: Some more attempts to configure QT creator.

R* is booting properly and starts X11 up on the boot.

It appears my macos gcc-4.7-linaro-rpi-gnueabihf is broken, looking
for some alternatives.

Virtialization on macos: https://github.com/psema4/pine/wiki/Installing-QEMU-on-OS-X

An attempt to install gcc-4.2.

http://www.cnx-software.com/2011/10/18/using-raspberry-pi-as-an-internet-kiosk/
http://www.cnx-software.com/2011/10/18/raspberry-pi-emulator-in-ubuntu-with-qemu/

Some thoughts on the playout design:

Scheme #1

┌--------------------------------┐
| OS                             |
| ┌----------------------------┐ |
| | X11                        | |
| | ┌------------------------┐ | |
| | | Application            | | |
| | | ┌----------------┐     | | |
| | | | VideoContainer |     | | |
| | | └----------------┘     | | |
| | | ┌----------------┐     | | |
| | | | WebContainer   |     | | |
| | | └----------------┘     | | |
| | └------------------------┘ | |
| └----------------------------┘ |
|             ^^^                |
|             |||                |
|             vvv                |
|          ( socket )            |
|             ^^^                |
|             |||                |
|             vvv                |
| ┌----------------------------┐ |        ______________
| | paneld                  <---------->(  outer system  )
| └----------------------------┘ |        --------------
└--------------------------------┘

Scheme #2

┌--------------------------------┐
| OS                             |
| ┌----------------------------┐ |
| | X11                        | |
| | ┌------------------------┐ | |
| | | Application            | | |
| | | ┌----------------┐     | | |
| | | | VideoContainer |     | | |
| | | └----------------┘     | | |
| | | ┌----------------┐     | | |
| | | | WebContainer   |     | | |
| | | └----------------┘     | | |
| | | ┌----------------┐     | | |
| | | | paneld        <--------------->(  outer system  )
| | | └----------------┘     | | |
| | └------------------------┘ | |
| └----------------------------┘ |
└--------------------------------┘

paneld might implement some REST API in order to unify the client lib code.

Some ideas on the distributed model:

Playouts might work with no centralized management server and coordinate themselves.

Playouts might run auto-discovery services like zeroconf and discover each other.

The content might be also distributed and be replicated as much as needed.

In this case playouts do the content exchange based on the information from the
neighbours. This info is being delivered with gossips.

Every node keeps in the memory the state of the content.

================================================================================
